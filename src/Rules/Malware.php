<?php

namespace DivineOmega\LaravelMalwareValidationRule\Rules;

use DivineOmega\LaravelMalwareValidationRule\Exceptions\MalwareScanFailedException;
use DivineOmega\LaravelMalwareValidationRule\Scanner;
use Illuminate\Contracts\Validation\Rule;
use Illuminate\Http\UploadedFile;
use InvalidArgumentException;

class Malware implements Rule
{
    public $showMalwareName;
    public $malwareName = null;

    /**
     * Malware rule constructor.
     *
     * @param bool $showMalwareName
     */
    public function __construct($showMalwareName = true)
    {
        $this->showMalwareName = $showMalwareName;
    }

    /**
     * Determine if the validation rule passes.
     *
     * @param string $attribute
     * @param UploadedFile $value
     *
     * @return bool
     * @throws MalwareScanFailedException
     */
    public function passes($attribute, $value)
    {
        if (!($value instanceof UploadedFile)) {
            throw new InvalidArgumentException('The malware validation rule must validate a file field.');
        }

        $result = (new Scanner())->scanFile($value->getRealPath());

        if ($result->infected) {
            $this->malwareName = $result->malwareName;
            return false;
        }

        return true;
    }

    /**
     * Get the validation error message.
     *
     * @return string
     */
    public function message()
    {
        $message = 'The uploaded file contains a virus/malware';

        if ($this->malwareName && $this->showMalwareName) {
            $message .= ' known as '.$this->malwareName;
        }

        $message .= '.';

        return $message;
    }
}